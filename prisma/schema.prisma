// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubId      String?   @unique
  githubLogin   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  excerpt        String?   @db.Text
  coverImage     String?
  published      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  publishedAt    DateTime?
  authorId       String
  author         User      @relation(fields: [authorId], references: [id])
  tags           Tag[]     @relation("PostToTag")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostToTag")
}

model AuthorizedPoster {
  id                String   @id @default(cuid())
  githubLogin       String   @unique
  isPermanent       Boolean  @default(false)
  permissionLevel   String   @default("contributor") // contributor, editor, admin
  canPublish        Boolean  @default(true)
  canEdit           Boolean  @default(true)
  canDelete         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastAuthorizedAt  DateTime @default(now())
  authorizedBy      String?  // githubLogin of the user who authorized this poster
}