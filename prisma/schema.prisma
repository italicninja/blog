// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable PostgreSQL full-text search
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  // Enable connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Enums for better type safety
enum PermissionLevel {
  CONTRIBUTOR
  EDITOR
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  githubId      String?   @unique
  githubLogin   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  pinnedProjects PinnedProject[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id             String      @id @default(cuid())
  title          String
  slug           String      @unique
  content        String      @db.Text
  excerpt        String?     @db.Text
  coverImage     String?
  status         PostStatus  @default(DRAFT)
  isDeleted      Boolean     @default(false)
  deletedAt      DateTime?
  version        Int         @default(1)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  publishedAt    DateTime?
  authorId       String
  author         User        @relation(fields: [authorId], references: [id])
  tags           Tag[]       @relation("PostToTag")
  previousVersion String?    // Reference to previous version's id
  nextVersion    String?     // Reference to next version's id

  @@index([slug])
  @@index([status, publishedAt])
  @@index([authorId])
  @@index([isDeleted, status])
  @@index([title])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostToTag")
  pinnedProjects PinnedProject[] @relation("PinnedProjectToTag")
}

model PinnedProject {
  id            String    @id @default(cuid())
  name          String
  url           String
  description   String    @db.Text
  completedAt   DateTime
  sortOrder     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          Tag[]     @relation("PinnedProjectToTag")

  @@index([userId])
  @@index([completedAt])
  @@index([sortOrder])
}

model AuthorizedPoster {
  id                String          @id @default(cuid())
  githubLogin       String          @unique
  isPermanent       Boolean         @default(false)
  permissionLevel   PermissionLevel @default(CONTRIBUTOR)
  canPublish        Boolean         @default(true)
  canEdit           Boolean         @default(true)
  canDelete         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  lastAuthorizedAt  DateTime        @default(now())
  lastLoginAt       DateTime?
  loginCount        Int             @default(0)
  authorizedBy      String?         // githubLogin of the user who authorized this poster

  @@index([githubLogin])
  @@index([permissionLevel])
}
